const Xn = 'just-gha-gm-pages'; const gK = ["/docs","/","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/B9J7W8g-","/_just/f_e0p5b1"]; const Ri = [ '/_just/', '/_just/index.json' ]; let bK = null; const oc = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( xU().then(cacheId => { bK = cacheId; return caches.open(Xn) .then(jN => { return jN.addAll(gK)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( eP().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(Xn).then(jN => { return jN.match(event.request).then(BO => { return BO || fetch(event.request)})}) )} }); const xU=async()=>{ for (const Pe of Ri) { try { const BO = await fetch(Pe); if (BO.ok) { const EU = await BO.json(); return EU.jN || oc} }catch(error){} } return oc}; const eP=async()=>{ try { const EO = await xU(); if (bK !== EO) { bK = EO; const MZ = await caches.MZ(); await Promise.all( MZ.map(key => { if (key === Xn) { return caches.delete(key)} }) ); const jN = await caches.open(Xn); await jN.addAll(gK)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { eP().then(() => { event.ports[0].postMessage({result: 'Done'})})} })