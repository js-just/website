const XT = 'just-gha-gm-pages'; const xf = ["/docs","/","/docs/config","/docs/getting-started","/docs/generator/advanced-usage","/docs/generator/syntax","/docs/generator/troubleshooting","/docs/modes/compressor","/docs/modes/generator","/docs/modes/postprocessor","/docs/modes/redirector","/_just/r_Y7k-X9","/_just/c3V6n4b1"]; const uZ = [ '/_just/', '/_just/index.json' ]; let aX = null; const uo = 'default'; self.addEventListener('install', event => { self.skipWaiting(); event.waitUntil( ZM().then(cacheId => { aX = cacheId; return caches.open(XT) .then(QL => { return QL.addAll(xf)}) .then(()=>{})}) )}); self.addEventListener('activate', event => { event.waitUntil( Yk().then(()=>{}) )}); self.addEventListener('fetch', (event) => { if (event.request.headers.get('X-JUST-GHA-GM-Navigation') === 'true') { event.respondWith( caches.open(XT).then(QL => { return QL.match(event.request).then(mM => { return mM || fetch(event.request)})}) )} }); const ZM=async()=>{ for (const NI of uZ) { try { const mM = await fetch(NI); if (mM.ok) { const Jc = await mM.json(); return Jc.QL || uo} }catch(error){} } return uo}; const Yk=async()=>{ try { const Uc = await ZM(); if (aX !== Uc) { aX = Uc; const jA = await caches.jA(); await Promise.all( jA.map(key => { if (key === XT) { return caches.delete(key)} }) ); const QL = await caches.open(XT); await QL.addAll(xf)}else{} }catch(error){} }; self.addEventListener('message', event => { if (event.data && event.data.type === 'CHECK_CACHE') { Yk().then(() => { event.ports[0].postMessage({result: 'Done'})})} })